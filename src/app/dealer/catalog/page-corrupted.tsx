"use client";

import React, { useState, useEffect, useCallback } from "react";
import Link from "next/link";
import { Product, Category } from "@/lib/entities";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Search,
  Package,
  ShoppingCart,
  Star,
  Check,
  Eye,
  Download
} from "lucide-react";
import useCart from '@/components/useCart';
import DealerAuthWrapper from '@/components/dealer/DealerAuthWrapper';

const brands = ["All", "FastDrill", "Spider", "Gorkha", "General Imports"];

export default function DealerCatalog() {
  const [products, setProducts] = useState<any[]>([]);
  const [filteredProducts, setFilteredProducts] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedBrand, setSelectedBrand] = useState("All");
  const [categories, setCategories] = useState<string[]>([]);
  const [selectedCategory, setSelectedCategory] = useState("All");
  const [selectedProduct, setSelectedProduct] = useState<any>(null);
  const [isVariantDialogOpen, setIsVariantDialogOpen] = useState(false);
  const [isDetailsDialogOpen, setIsDetailsDialogOpen] = useState(false);
  const [addedToCart, setAddedToCart] = useState<any>(null);

  const orderCart = useCart('orderCart');

  const applyFilters = useCallback(() => {
    let filtered = [...products];
    if (searchQuery.trim()) {
      filtered = filtered.filter((p: any) => p.name.toLowerCase().includes(searchQuery.toLowerCase()));
    }
    if (selectedBrand !== "All") {
      filtered = filtered.filter((p: any) => p.brand === selectedBrand);
    }
    if (selectedCategory !== "All") {
      filtered = filtered.filter((p: any) => p.category === selectedCategory);
    }
    setFilteredProducts(filtered);
  }, [products, searchQuery, selectedBrand, selectedCategory]);

  useEffect(() => {
    loadProducts();
    loadCategories();
  }, []);

  useEffect(() => {
    applyFilters();
  }, [applyFilters]);

  const loadProducts = async () => {
    setIsLoading(true);
    try {
      console.log('Loading products for dealer catalog...');
      const allProducts = await Product.list('-created_at');
      console.log('Products loaded:', allProducts.length);
      setProducts(allProducts);
    } catch (error: any) {
      console.error("Failed to load products:", error);
      setProducts([]);
    }
    setIsLoading(false);
  };

  const loadCategories = async () => {
    try {
      const activeCategories = await Category.getActive();
      setCategories(['All', ...activeCategories.map((cat: any) => cat.name)]);
    } catch (error: any) {
      console.error("Failed to load categories:", error);
      setCategories(['All']);
    }
  };

  const showSuccessMessage = (productName: string) => {
    setAddedToCart({ productName, timestamp: Date.now() });
    setTimeout(() => setAddedToCart(null), 3000);
  };

  const handleAddToCart = (product: any, variant: any) => {
    orderCart.addToCart(product, variant, 1);
    showSuccessMessage(product.name);
    console.log('Added to cart:', product.name, variant);
  };

  // Function to download product details with pricing for dealers
  const downloadProductDetails = (product: any) => {
    const productInfo = `
DEALER PRODUCT DETAILS
======================

Name: ${product.name}
Brand: ${product.brand || 'N/A'}
Category: ${product.category || 'N/A'}
Description: ${product.description || 'No description available'}

VARIANTS & PRICING:
${product.variants?.map((variant: any, index: number) => 
  `${index + 1}. Size: ${variant.size || 'N/A'}
   Packaging: ${variant.packaging || 'N/A'}
   Est. Price: ${variant.estimated_price_npr ? `NPR ${variant.estimated_price_npr.toLocaleString()}` : 'Contact for Price'}
   Stock: ${variant.stock_status || 'N/A'}`
).join('\n\n') || 'No variants available'}

Dealer Information:
This document contains confidential pricing information.
For internal use only.

Generated on: ${new Date().toLocaleDateString()}
Generated by: Dealer Portal
    `;
    
    const blob = new Blob([productInfo], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `dealer_${product.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_details.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const ProductCard = ({ product }: { product: any }) => {
    return (
      <Card className="group overflow-hidden hover:shadow-lg transition-all duration-300 flex flex-col h-full">
        <div className="relative h-48 overflow-hidden bg-gray-100">
          {product.images && product.images.length > 0 ? (
            <img
              src={product.images[0]}
              alt={product.name}
              className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
            />
          ) : (
            <div className="w-full h-full flex items-center justify-center">
              <Package className="w-16 h-16 text-gray-400" />
            </div>
          )}
          <Badge className="absolute top-3 left-3 bg-red-600 text-white shadow-md">{product.brand}</Badge>
          {product.featured && <Star className="absolute top-3 right-3 w-5 h-5 text-yellow-400 fill-current drop-shadow" />}
        </div>
        
        <CardContent className="p-4 flex-1 flex flex-col">
          <div className="flex-1">
            <h3 className="text-base font-semibold mb-2 line-clamp-2 min-h-[2.5rem]">
              {product.name}
            </h3>

            {product.variants && product.variants.length > 0 && (
              <div className="flex flex-wrap gap-1 mb-3">
                {product.variants.slice(0, 3).map((variant: any, index: number) => (
                  <span
                    key={index}
                    className="text-xs px-2 py-1 bg-gray-100 text-gray-600 border border-gray-200 rounded"
                  >
                    {variant.size || 'Standard'}
                  </span>
                ))}
                {product.variants.length > 3 && (
                  <span className="text-xs px-2 py-1 bg-gray-100 text-gray-600 border border-gray-200 rounded">
                    +{product.variants.length - 3} more
                  </span>
                )}
              </div>
            )}
            
            <div className="flex items-center justify-between mb-3">
              <Badge variant="outline" className="text-xs">{product.category || 'Uncategorized'}</Badge>
              {product.variants?.[0]?.estimated_price_npr && (
                <span className="text-sm font-bold text-red-700">
                  From NPR {Math.min(...product.variants.map((v: any) => v.estimated_price_npr || 0)).toLocaleString()}
                </span>
              )}
            </div>

            <p className="text-gray-500 mb-3 text-xs line-clamp-2">
              {product.description || 'No description available.'}
            </p>

            {product.variants && product.variants.length > 0 && (
              <div className="text-xs text-gray-500 mb-3">
                {product.variants.length} variant{product.variants.length > 1 ? 's' : ''} available
              </div>
            )}
          </div>

          <div className="mt-auto pt-2 flex flex-col gap-2">
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                className="flex-1 h-8 text-xs"
                onClick={() => {
                  setSelectedProduct(product);
                  setIsDetailsDialogOpen(true);
                }}
              >
                <Eye className="w-3 h-3 mr-1" />
                Details
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="h-8 w-8 p-0"
                onClick={() => downloadProductDetails(product)}
                title="Download Product Details"
              >
                <Download className="w-3 h-3" />
              </Button>
            </div>
            <Button
              size="sm"
              className="w-full h-8 bg-red-600 hover:bg-red-700 text-xs"
              onClick={() => {
                setSelectedProduct(product);
                setIsVariantDialogOpen(true);
              }}
            >
              <ShoppingCart className="w-3 h-3 mr-1" />
              Add to Order
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  };

  return (
    <DealerAuthWrapper>
      <div className="p-6 bg-gray-50 min-h-screen">
        <div className="max-w-7xl mx-auto">
          {/* Success Toast */}
          {addedToCart && (
            <div className="fixed top-4 right-4 z-50 bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-md shadow-lg animate-in slide-in-from-right">
              <div className="flex items-center">
                <Check className="w-5 h-5 mr-2" />
                <div>
                  <p className="font-medium">Item Added Successfully!</p>
                  <p className="text-sm">"{addedToCart.productName}" added to Order Cart</p>
                </div>
              </div>
            </div>
          )}

          <div className="flex justify-between items-center mb-8">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">Dealer Catalog</h1>
              <p className="text-gray-600">Browse products and add them to your order cart.</p>
            </div>

            <div className="flex gap-4">
              <Link href="/dealer/order-cart">
                <Button className="flex items-center gap-2 bg-red-600 hover:bg-red-700">
                  <ShoppingCart className="w-4 h-4" />
                  Order Cart ({orderCart.getCartItemCount()})
                </Button>
              </Link>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
            <div className="flex flex-col lg:flex-row gap-4">
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
                <Input
                  type="text"
                  placeholder="Search products..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>
              <div className="flex flex-col sm:flex-row gap-4">
                <Select value={selectedBrand} onValueChange={setSelectedBrand}>
                  <SelectTrigger className="w-full sm:w-40" suppressHydrationWarning>
                    <SelectValue placeholder="Brand" />
                  </SelectTrigger>
                  <SelectContent>{brands.map(b => <SelectItem key={b} value={b}>{b}</SelectItem>)}</SelectContent>
                </Select>
                <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                  <SelectTrigger className="w-full sm:w-40" suppressHydrationWarning>
                    <SelectValue placeholder="Category" />
                  </SelectTrigger>
                  <SelectContent>{categories.map(c => <SelectItem key={c} value={c}>{c}</SelectItem>)}</SelectContent>
                </Select>
              </div>
            </div>
          </div>

          {isLoading ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {[...Array(8)].map((_, i) => (
                <Card key={i} className="animate-pulse">
                  <div className="h-48 bg-gray-200"></div>
                  <CardContent className="p-6">
                    <div className="h-4 bg-gray-200 rounded mb-2"></div>
                    <div className="h-3 bg-gray-200 rounded mb-4"></div>
                    <div className="h-8 bg-gray-200 rounded"></div>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {filteredProducts.map((product: any) => (
                <ProductCard key={product.id} product={product} />
              ))}
            </div>
          )}
        </div>
      </div>
    </DealerAuthWrapper>
  );
}
