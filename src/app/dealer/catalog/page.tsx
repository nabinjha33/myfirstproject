"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";
import { Product, Category } from "@/lib/entities";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Search,
  Package,
  ShoppingCart,
  Star,
  Download,
  Eye,
  Check
} from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import useCart from '@/components/useCart';
import DealerAuthWrapper from '@/components/dealer/DealerAuthWrapper';

const brands = ["All", "FastDrill", "Spider", "Gorkha", "General Imports"];

export default function DealerCatalog() {
  const [products, setProducts] = useState<any[]>([]);
  const [filteredProducts, setFilteredProducts] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedBrand, setSelectedBrand] = useState("All");
  const [categories, setCategories] = useState<string[]>([]);
  const [selectedCategory, setSelectedCategory] = useState("All");
  const [selectedProduct, setSelectedProduct] = useState<any>(null);
  const [isDetailsDialogOpen, setIsDetailsDialogOpen] = useState(false);
  const [addedToCart, setAddedToCart] = useState<any>(null);

  const orderCart = useCart('orderCart');

  useEffect(() => {
    loadData();
  }, []);

  useEffect(() => {
    applyFilters();
  }, [products, searchQuery, selectedBrand, selectedCategory]);

  const loadData = async () => {
    setIsLoading(true);
    try {
      const [allProducts, activeCategories] = await Promise.all([
        Product.list('-created_at'),
        Category.getActive()
      ]);
      
      setProducts(allProducts);
      setCategories(['All', ...activeCategories.map((cat: any) => cat.name)]);
    } catch (error) {
      console.error("Failed to load data:", error);
      setProducts([]);
      setCategories(['All']);
    }
    setIsLoading(false);
  };

  const applyFilters = () => {
    let filtered = [...products];
    if (searchQuery.trim()) {
      filtered = filtered.filter((p: any) => p.name.toLowerCase().includes(searchQuery.toLowerCase()));
    }
    if (selectedBrand !== "All") {
      filtered = filtered.filter((p: any) => p.brand === selectedBrand);
    }
    if (selectedCategory !== "All") {
      filtered = filtered.filter((p: any) => p.category === selectedCategory);
    }
    setFilteredProducts(filtered);
  };

  const showSuccessMessage = (productName: string) => {
    setAddedToCart({ productName, timestamp: Date.now() });
    setTimeout(() => setAddedToCart(null), 3000);
  };

  const handleAddToCart = (product: any) => {
    const defaultVariant = product.variants?.[0] || { id: 'default', size: 'Standard', packaging: 'Default' };
    orderCart.addToCart(product, defaultVariant, 1);
    showSuccessMessage(product.name);
    console.log('Added to cart:', product.name);
  };

  // Function to download product details as PDF for dealers
  const downloadProductDetails = async (product: any) => {
    try {
      const { generateProductPDF } = await import('@/lib/pdfGenerator');
      await generateProductPDF(product, true); // true = dealer (with pricing)
    } catch (error) {
      console.error('Error generating PDF:', error);
      // Fallback to text download
      const productInfo = `
DEALER PRODUCT DETAILS
======================

Name: ${product.name}
Brand: ${product.brand || 'N/A'}
Category: ${product.category || 'N/A'}
Description: ${product.description || 'No description available'}

VARIANTS & PRICING:
${product.variants?.map((variant: any, index: number) => 
  `${index + 1}. Size: ${variant.size || 'N/A'}
   Packaging: ${variant.packaging || 'N/A'}
   Est. Price: ${variant.estimated_price_npr ? `NPR ${variant.estimated_price_npr.toLocaleString()}` : 'Contact for Price'}
   Stock: ${variant.stock_status || 'N/A'}`
).join('\n\n') || 'No variants available'}

Dealer Information:
This document contains confidential pricing information.
For internal use only.

Generated on: ${new Date().toLocaleDateString()}
Generated by: Dealer Portal
      `;
      
      const blob = new Blob([productInfo], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `dealer_${product.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_details.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    }
  };

  const ProductCard = ({ product }: { product: any }) => (
    <Card className="group overflow-hidden hover:shadow-lg transition-all duration-300 flex flex-col h-full">
      <div className="relative h-48 overflow-hidden bg-gray-100">
        {product.images && product.images.length > 0 ? (
          <img
            src={product.images[0]}
            alt={product.name}
            className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
          />
        ) : (
          <div className="w-full h-full flex items-center justify-center">
            <Package className="w-16 h-16 text-gray-400" />
          </div>
        )}
        <Badge className="absolute top-3 left-3 bg-red-600 text-white shadow-md">{product.brand}</Badge>
        {product.featured && <Star className="absolute top-3 right-3 w-5 h-5 text-yellow-400 fill-current drop-shadow" />}
      </div>
      
      <CardContent className="p-4 flex-1 flex flex-col">
        <div className="flex-1">
          <h3 className="text-base font-semibold mb-2 line-clamp-2 min-h-[2.5rem]">
            {product.name}
          </h3>
          
          <div className="flex items-center justify-between mb-3">
            <Badge variant="outline" className="text-xs">{product.category || 'Uncategorized'}</Badge>
            {product.variants?.[0]?.estimated_price_npr && (
              <span className="text-sm font-bold text-red-700">
                From NPR {Math.min(...product.variants.map((v: any) => v.estimated_price_npr || 0)).toLocaleString()}
              </span>
            )}
          </div>

          <p className="text-gray-500 mb-3 text-xs line-clamp-2">
            {product.description || 'No description available.'}
          </p>
        </div>

        <div className="mt-auto pt-2 flex flex-col gap-2">
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="sm"
              className="flex-1 h-8 text-xs"
              onClick={() => {
                setSelectedProduct(product);
                setIsDetailsDialogOpen(true);
              }}
            >
              <Eye className="w-3 h-3 mr-1" />
              Details
            </Button>
            <Button
              variant="outline"
              size="sm"
              className="h-8 w-8 p-0"
              onClick={() => downloadProductDetails(product)}
              title="Download Product Details (PDF)"
            >
              <Download className="w-3 h-3" />
            </Button>
          </div>
          <Button
            size="sm"
            className="w-full h-8 bg-red-600 hover:bg-red-700 text-xs"
            onClick={() => handleAddToCart(product)}
          >
            <ShoppingCart className="w-3 h-3 mr-1" />
            Add to Cart
          </Button>
        </div>
      </CardContent>
    </Card>
  );

  return (
    <DealerAuthWrapper>
      <div className="p-6 bg-gray-50 min-h-screen">
        <div className="max-w-7xl mx-auto">
          {/* Success Toast */}
          {addedToCart && (
            <div className="fixed top-4 right-4 z-50 bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-md shadow-lg animate-in slide-in-from-right">
              <div className="flex items-center">
                <Check className="w-5 h-5 mr-2" />
                <div>
                  <p className="font-medium">Item Added Successfully!</p>
                  <p className="text-sm">"{addedToCart.productName}" added to Order Cart</p>
                </div>
              </div>
            </div>
          )}

          <div className="flex justify-between items-center mb-8">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">Dealer Catalog</h1>
              <p className="text-gray-600">Browse products and add them to your order cart.</p>
            </div>

            <div className="flex gap-4">
              <Link href="/dealer/order-cart">
                <Button className="flex items-center gap-2 bg-red-600 hover:bg-red-700">
                  <ShoppingCart className="w-4 h-4" />
                  Order Cart ({orderCart.getCartItemCount()})
                </Button>
              </Link>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
            <div className="flex flex-col lg:flex-row gap-4">
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
                <Input
                  type="text"
                  placeholder="Search products..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>
              <div className="flex flex-col sm:flex-row gap-4">
                <Select value={selectedBrand} onValueChange={setSelectedBrand}>
                  <SelectTrigger className="w-full sm:w-40">
                    <SelectValue placeholder="Brand" />
                  </SelectTrigger>
                  <SelectContent>
                    {brands.map(b => <SelectItem key={b} value={b}>{b}</SelectItem>)}
                  </SelectContent>
                </Select>
                <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                  <SelectTrigger className="w-full sm:w-40">
                    <SelectValue placeholder="Category" />
                  </SelectTrigger>
                  <SelectContent>
                    {categories.map(c => <SelectItem key={c} value={c}>{c}</SelectItem>)}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>

          {isLoading ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {[...Array(8)].map((_, i) => (
                <Card key={i} className="animate-pulse">
                  <div className="h-48 bg-gray-200"></div>
                  <CardContent className="p-6">
                    <div className="h-4 bg-gray-200 rounded mb-2"></div>
                    <div className="h-3 bg-gray-200 rounded mb-4"></div>
                    <div className="h-8 bg-gray-200 rounded"></div>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {filteredProducts.map((product: any) => (
                <ProductCard key={product.id} product={product} />
              ))}
            </div>
          )}

          {/* Product Details Dialog */}
          <Dialog open={isDetailsDialogOpen} onOpenChange={setIsDetailsDialogOpen}>
            <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle className="text-2xl">{selectedProduct?.name}</DialogTitle>
              </DialogHeader>
              
              {selectedProduct && (
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 py-4">
                  {/* Product Images Section */}
                  <div className="space-y-4">
                    <div className="relative bg-white rounded-xl overflow-hidden border border-gray-200 shadow-sm">
                      <div className="aspect-square flex items-center justify-center">
                        {selectedProduct.images && selectedProduct.images.length > 0 ? (
                          <img
                            src={selectedProduct.images[0]}
                            alt={selectedProduct.name}
                            className="w-full h-full object-cover"
                          />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center bg-gray-100">
                            <Package className="w-24 h-24 text-gray-400" />
                          </div>
                        )}
                      </div>
                      
                      {selectedProduct.featured && (
                        <div className="absolute top-4 right-4">
                          <Badge className="bg-yellow-500 text-white">
                            <Star className="w-3 h-3 mr-1 fill-current" />
                            Featured
                          </Badge>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Product Information Section */}
                  <div className="space-y-6">
                    <div>
                      <div className="flex items-center gap-4 mb-4">
                        <Badge className="bg-red-600 text-white">{selectedProduct.brand}</Badge>
                        <span className="text-sm text-gray-600">{selectedProduct.category}</span>
                      </div>
                      
                      <h2 className="text-3xl font-bold text-gray-900 mb-4">
                        {selectedProduct.name}
                      </h2>
                      
                      {selectedProduct.description && (
                        <div className="mb-6">
                          <h4 className="font-semibold text-gray-900 mb-3">Description</h4>
                          <p className="text-gray-600 leading-relaxed whitespace-pre-wrap">
                            {selectedProduct.description}
                          </p>
                        </div>
                      )}
                    </div>

                    {/* Variants Table */}
                    {selectedProduct.variants && selectedProduct.variants.length > 0 && (
                      <div>
                        <h4 className="font-semibold text-gray-900 mb-3">Available Variants</h4>
                        <div className="overflow-x-auto">
                          <Table>
                            <TableHeader>
                              <TableRow>
                                <TableHead>Size</TableHead>
                                <TableHead>Packaging</TableHead>
                                <TableHead>Est. Price (NPR)</TableHead>
                                <TableHead>Stock Status</TableHead>
                              </TableRow>
                            </TableHeader>
                            <TableBody>
                              {selectedProduct.variants.map((variant: any, index: number) => (
                                <TableRow key={index}>
                                  <TableCell className="font-medium">
                                    {variant.size || '-'}
                                  </TableCell>
                                  <TableCell>{variant.packaging || '-'}</TableCell>
                                  <TableCell>
                                    {variant.estimated_price_npr ? 
                                      `NPR ${variant.estimated_price_npr.toLocaleString()}` : 
                                      'Contact for Price'
                                    }
                                  </TableCell>
                                  <TableCell>
                                    <Badge
                                      variant="outline"
                                      className={
                                        variant.stock_status === 'In Stock' ? 'text-green-600 border-green-600 bg-green-50' :
                                        variant.stock_status === 'Low Stock' ? 'text-yellow-600 border-yellow-600 bg-yellow-50' :
                                        variant.stock_status === 'Out of Stock' ? 'text-red-600 border-red-600 bg-red-50' :
                                        'text-blue-600 border-blue-600 bg-blue-50'
                                      }
                                    >
                                      {variant.stock_status}
                                    </Badge>
                                  </TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
                        </div>
                      </div>
                    )}

                    {/* Action Buttons */}
                    <div className="flex justify-between">
                      <Button
                        variant="outline"
                        onClick={() => downloadProductDetails(selectedProduct)}
                      >
                        <Download className="w-4 h-4 mr-2" />
                        Download Details
                      </Button>
                      <Button
                        className="bg-red-600 hover:bg-red-700"
                        onClick={() => {
                          handleAddToCart(selectedProduct);
                          setIsDetailsDialogOpen(false);
                        }}
                      >
                        <ShoppingCart className="w-4 h-4 mr-2" />
                        Add to Order Cart
                      </Button>
                    </div>
                  </div>
                </div>
              )}
            </DialogContent>
          </Dialog>
        </div>
      </div>
    </DealerAuthWrapper>
  );
}
